<%- include('components/template') %>
<style>
  /* ... (your style code unchanged) ... */
</style>

<!-- Particle background container -->
<div id="particles-bg"></div>

<main id="content">
  <div class="bg-transparent">
    <div class="sm:flex sm:items-center px-8 pt-4">
      <div class="sm:flex-auto">
        <h1 class="text-base font-medium leading-6 neon-text"><%= req.translations.instances %></h1>
        <p class="mt-1 tracking-tight text-sm text-purple"><%= req.translations.viewInstances %></p>
      </div>
      <% if (req.user.admin === true) { %>
        <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
          <% if (req.query.see == 'other') { %>
            <button onclick="location.href='/instances'" type="button"
              class="btn-purple rounded-xl px-3 py-2 text-center text-sm font-medium shadow-lg transition focus-visible:outline focus-visible:outline-2">
              <%= req.translations.showingYourInstances %>
            </button>
          <% } else { %>
            <button onclick="location.href='/instances?see=other'" type="button"
              class="btn-purple rounded-xl px-3 py-2 text-center text-sm font-medium shadow-lg transition focus-visible:outline focus-visible:outline-2">
              <%= req.translations.seeAllInstances %>
            </button>
          <% } %>
        </div>
      <% } %>
    </div>
  </div>
  <div class="px-4 sm:px-6 lg:px-8">
    <% if (instances.length == 0) { %>
      <!-- No instances -->
      <div id="noInstancesContainer" class="text-center mt-64 bg-glass p-8">
        <!-- ... (svg and no-instance message unchanged) ... -->
        <h3 class="mt-4 text-md font-medium neon-text"><%= req.translations.noInstances %></h3>
        <p class="mt-1 text-sm text-pink"><%= req.translations.noInstancesText %></p>
      </div>
    <% } %>
    <dl class="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-2">
      <% instances.forEach(function (instance) { %>
        <a id="instancesContainer" data-instance-id="<%= instance.Id %>"
          href="../instance/<%= instance.Id %>"
          class="p-3 instance-card rounded-xl overflow-hidden sm:p-6 lg:p-8">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-3">
              <div class="rounded-xl border border-purple inline-flex bg-glass">
                <!-- ... (svg unchanged) ... -->
              </div>
              <h2 class="text-lg font-medium pl-0 pr-3 md:sm:pl-3 neon-text tracking-tight">
                <%= instance.Name %>
              </h2>
            </div>
            <div class="flex items-center space-x-2">
              <span data-status-bg
                class="bg-glass text-purple text-xs font-medium px-2.5 py-1 rounded-xl flex items-center border border-purple">
                <span data-status>
                  <svg class="animate-spin h-3 w-3 text-pink mr-1 inline-flex"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                  </svg>
                  <%= req.translations.loading %>
                </span>
              </span>
              <span class="border border-pink text-pink text-xs font-medium px-2.5 py-1 rounded-xl flex items-center bg-glass">
                <span data-ram-usage>
                  <svg class="animate-spin h-3 w-3 text-purple mr-1 inline-flex"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                  </svg>
                  <%= req.translations.loading %>
                </span>
              </span>
              <span class="border border-purple text-purple text-xs font-medium px-2.5 py-1 rounded-xl flex items-center bg-glass">
                <span data-cpu-usage>
                  <svg class="animate-spin h-3 w-3 text-pink mr-1 inline-flex"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                  </svg>
                  <%= req.translations.loading %>
                </span>
              </span>
            </div>
          </div>
        </a>
      <% }); %>
    </dl>
  </div>
</main>
<%- include('components/footer') %>

<!-- tsParticles CDN -->
<script src="https://cdn.jsdelivr.net/npm/tsparticles-engine@3.3.0/tsparticles.engine.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/tsparticles-basic@3.3.0/tsparticles.basic.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/tsparticles-preset-links@3.3.0/tsparticles.preset.links.min.js"></script>
<script>
  // Initialize tsParticles for animated background
  window.addEventListener('DOMContentLoaded', function() {
    if (!window.tsParticles) return;
    tsParticles.load("particles-bg", {
      fullScreen: { enable: false },
      background: { color: "transparent" },
      fpsLimit: 60,
      particles: {
        number: {
          value: 90,
          density: { enable: true, area: 800 }
        },
        color: {
          value: ["#a259f7", "#f357a8", "#fff", "#7b2ff2", "#3b2667", "#ffdbf7"]
        },
        shape: { type: "circle" },
        opacity: {
          value: 0.6,
          random: true,
          anim: { enable: true, speed: 1, opacity_min: 0.2, sync: false }
        },
        size: {
          value: 4,
          random: { enable: true, minimumValue: 1 },
          anim: { enable: true, speed: 3, size_min: 1, sync: false }
        },
        links: {
          enable: true,
          distance: 130,
          color: "#a259f7",
          opacity: 0.3,
          width: 1
        },
        move: {
          enable: true,
          speed: 1.3,
          direction: "none",
          random: true,
          straight: false,
          outModes: { default: "out" }
        }
      },
      detectRetina: true
    });
  });
</script>

<!-- Inject translations as JS constants for client-side updates -->
<script>
  // These values are injected from EJS, so you can use them in JS
  const T = {
    loading: "<%= req.translations.loading %>",
    ramUsage: "<%= req.translations.ramUsage %>",
    cpuUsage: "<%= req.translations.cpuUsage %>",
    offline: "<%= req.translations.offline || 'Offline' %>", // fallback in case translation missing
    online: "<%= req.translations.online || 'Online' %>"
  };
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const instances = document.querySelectorAll('[data-instance-id]');
    instances.forEach(instance => {
      const containerId = instance.dataset.instanceId;
      const isSecure = window.location.protocol === 'https:';
      const wsProtocol = isSecure ? 'wss' : 'ws';
      const wsPort = isSecure ? '' : `:<%= config.port %>`;
      const socket = new WebSocket(`${wsProtocol}://<%= config.domain %>${wsPort}/stats/${containerId}`);

      const statusElement = instance.querySelector('[data-status]');
      const statusBg = instance.querySelector('[data-status-bg]');
      const ramUsageElement = instance.querySelector('[data-ram-usage]');
      const cpuUsageElement = instance.querySelector('[data-cpu-usage]');

      // Set loading state initially
      statusElement.textContent = T.loading;
      ramUsageElement.textContent = T.loading;
      cpuUsageElement.textContent = T.loading;

      function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0.00 B';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
      }

      socket.onmessage = event => {
        let stats;
        try {
          stats = JSON.parse(event.data);
        } catch (e) {
          statusElement.textContent = T.offline;
          statusElement.className = 'text-neutral-500';
          ramUsageElement.textContent = '—';
          cpuUsageElement.textContent = '—';
          return;
        }
        if (stats.error) {
          statusElement.textContent = T.offline;
          statusElement.className = 'text-neutral-500';
          ramUsageElement.textContent = '—';
          cpuUsageElement.textContent = '—';
          return;
        }

        // RAM usage
        let ramUsageRaw = stats.memory_stats && stats.memory_stats.usage ? stats.memory_stats.usage : 0;
        let ramUsage = isNaN(ramUsageRaw) ? '0 B' : formatBytes(ramUsageRaw);
        let ramLimitRaw = stats.memory_stats && stats.memory_stats.limit ? stats.memory_stats.limit : 0;
        let ramLimit = isNaN(ramLimitRaw) ? '0 B' : formatBytes(ramLimitRaw);

        ramUsageElement.textContent = `${ramUsage} / ${ramLimit} ${T.ramUsage}`;

        // Status logic
        if (isNaN(ramUsageRaw) || ramUsageRaw === 0) {
          statusBg.classList.remove('bg-glass');
          statusBg.classList.add('bg-neutral-600/20');
          statusElement.className = 'text-neutral-500';
          statusElement.textContent = T.offline;
        } else if (ramUsageRaw > 1) {
          statusBg.classList.remove('bg-neutral-600/20');
          statusBg.classList.add('bg-glass');
          statusElement.className = 'text-pink neon-text';
          statusElement.textContent = T.online;
        }

        // CPU usage
        let cpuDelta = stats.cpu_stats?.cpu_usage?.total_usage - stats.precpu_stats?.cpu_usage?.total_usage;
        let systemCpuDelta = stats.cpu_stats?.system_cpu_usage - stats.precpu_stats?.system_cpu_usage;
        let cpuUsagePercent =
          (cpuDelta && systemCpuDelta && !isNaN(cpuDelta) && !isNaN(systemCpuDelta) && systemCpuDelta !== 0)
            ? ((cpuDelta / systemCpuDelta) * 100).toFixed(2) + '%'
            : '0%';

        cpuUsageElement.textContent = `${cpuUsagePercent} ${T.cpuUsage}`;
      };

      socket.onerror = () => {
        statusElement.textContent = T.offline;
        statusElement.className = 'text-neutral-500';
        ramUsageElement.textContent = '—';
        cpuUsageElement.textContent = '—';
      };
      socket.onclose = () => {
        statusElement.textContent = T.offline;
        statusElement.className = 'text-neutral-500';
        ramUsageElement.textContent = '—';
        cpuUsageElement.textContent = '—';
      };
    });
  });
</script>
