<%- include('components/template') %>
<style>
  body,
  html {
    height: 100%;
    margin: 0;
    padding: 0;
    background: linear-gradient(135deg, #2d0b5a 0%, #7b2ff2 50%, #f357a8 100%);
    min-height: 100vh;
    width: 100vw;
    overflow-x: hidden;
    /* fallback */
  }
  #particles-bg {
    position: fixed;
    z-index: 0;
    top: 0;
    left: 0;
    width: 100vw !important;
    height: 100vh !important;
    pointer-events: none;
  }
  #content {
    position: relative;
    z-index: 1;
  }
  .neon-text {
    color: #d1a4ff;
    text-shadow:
      0 0 8px #9b5cf6,
      0 0 16px #8f43ff,
      0 0 32px #f357a8;
  }
  .bg-glass {
    background: rgba(45, 11, 90, 0.75);
    backdrop-filter: blur(8px);
    border-radius: 20px;
    box-shadow: 0 8px 32px 0 rgba(123, 47, 242, 0.37);
    border: 1.5px solid rgba(255, 255, 255, 0.15);
  }
  .btn-purple {
    background: linear-gradient(90deg, #a259f7 0%, #f357a8 100%);
    color: #fff !important;
    border: none;
    box-shadow: 0 0 10px #a259f7, 0 0 3px #fff inset;
    transition: background 0.2s, box-shadow 0.2s;
  }
  .btn-purple:hover {
    background: linear-gradient(90deg, #f357a8 0%, #a259f7 100%);
    box-shadow: 0 0 20px #f357a8, 0 0 8px #fff inset;
  }
  /* Animations for cards and text */
  .instance-card {
    transition: transform 0.18s, box-shadow 0.18s;
    box-shadow: 0 2px 16px rgba(162,89,247,0.2), 0 1px 3px rgba(243,87,168,0.15);
    border: 1.5px solid rgba(162, 89, 247, 0.10);
    background: rgba(50, 15, 90, 0.86);
  }
  .instance-card:hover {
    transform: translateY(-6px) scale(1.025);
    box-shadow: 0 8px 32px rgba(123,47,242,0.35), 0 2px 12px rgba(243,87,168,0.18);
    border-color: #f357a8;
  }
  .text-white { color: #fff !important; }
  .text-purple { color: #a259f7 !important; }
  .text-pink { color: #f357a8 !important; }
  .border-purple { border-color: #a259f7 !important; }
  .border-pink { border-color: #f357a8 !important; }
</style>

<!-- Particle background container -->
<div id="particles-bg"></div>

<main id="content">
  <div class="bg-transparent">
    <div class="sm:flex sm:items-center px-8 pt-4">
      <div class="sm:flex-auto">
        <h1 class="text-base font-medium leading-6 neon-text"><%= req.translations.instances %></h1>
        <p class="mt-1 tracking-tight text-sm text-purple"><%= req.translations.viewInstances %></p>
      </div>
      <% if (req.user.admin === true) { %>
        <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
          <% if (req.query.see == 'other') { %>
            <button onclick="location.href='/instances'" type="button"
              class="btn-purple rounded-xl px-3 py-2 text-center text-sm font-medium shadow-lg transition focus-visible:outline focus-visible:outline-2">
              <%= req.translations.showingYourInstances %>
            </button>
          <% } else { %>
            <button onclick="location.href='/instances?see=other'" type="button"
              class="btn-purple rounded-xl px-3 py-2 text-center text-sm font-medium shadow-lg transition focus-visible:outline focus-visible:outline-2">
              <%= req.translations.seeAllInstances %>
            </button>
          <% } %>
        </div>
      <% } %>
    </div>
  </div>
  <div class="px-4 sm:px-6 lg:px-8">
    <% if (instances.length == 0) { %>
      <!-- No instances -->
      <div id="noInstancesContainer" class="text-center mt-64 bg-glass p-8">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
          class="mx-auto h-12 w-12 text-purple">
          <path fill-rule="evenodd"
            d="M11.622 1.602a.75.75 0 0 1 .756 0l2.25 1.313a.75.75 0 0 1-.756 1.295L12 3.118 10.128 4.21a.75.75 0 1 1-.756-1.295l2.25-1.313ZM5.898 5.81a.75.75 0 0 1-.27 1.025l-1.14.665 1.14.665a.75.75[...]
            clip-rule="evenodd" />
        </svg>
        <h3 class="mt-4 text-md font-medium neon-text"><%= req.translations.noInstances %></h3>
        <p class="mt-1 text-sm text-pink"><%= req.translations.noInstancesText %></p>
      </div>
    <% } %>
    <dl class="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-2">
      <% instances.forEach(function (instance) { %>
        <a id="instancesContainer" data-instance-id="<%= instance.Id %>"
          href="../instance/<%= instance.Id %>"
          class="p-3 instance-card rounded-xl overflow-hidden sm:p-6 lg:p-8">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-3">
              <div class="rounded-xl border border-purple inline-flex bg-glass">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                  class="size-5 mt-2.5 mb-2.5 mr-2.5 ml-2.5 text-pink">
                  <path
                    d="M12.378 1.602a.75.75 0 0 0-.756 0L3 6.632l9 5.25 9-5.25-8.622-5.03ZM21.75 7.93l-9 5.25v9l8.628-5.032a.75.75 0 0 0 .372-.648V7.93ZM11.25 22.18v-9l-9-5.25v8.57a.75.75 0 0 0 .372.6[...]
                </svg>
              </div>
              <h2 class="text-lg font-medium pl-0 pr-3 md:sm:pl-3 neon-text tracking-tight">
                <%= instance.Name %>
              </h2>
            </div>
            <div class="flex items-center space-x-2">
              <span data-status-bg
                class="bg-glass text-purple text-xs font-medium px-2.5 py-1 rounded-xl flex items-center border border-purple">
                <span data-status>
                  <svg class="animate-spin h-3 w-3 text-pink mr-1 inline-flex"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                    </circle>
                    <path class="opacity-75" fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                  </svg>
                  <%= req.translations.loading %>
                </span>
              </span>
              <span
                class="border border-pink text-pink text-xs font-medium px-2.5 py-1 rounded-xl flex items-center bg-glass">
                <span data-ram-usage>
                  <svg class="animate-spin h-3 w-3 text-purple mr-1 inline-flex"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                    </circle>
                    <path class="opacity-75" fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                  </svg>
                  <%= req.translations.loading %>
                </span>
              </span>
              <span
                class="border border-purple text-purple text-xs font-medium px-2.5 py-1 rounded-xl flex items-center bg-glass">
                <span data-cpu-usage>
                  <svg class="animate-spin h-3 w-3 text-pink mr-1 inline-flex"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                    </circle>
                    <path class="opacity-75" fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                    </path>
                  </svg>
                  <%= req.translations.loading %>
                </span>
              </span>
            </div>
          </div>
        </a>
      <% }); %>
    </dl>
  </div>
</main>
<%- include('components/footer') %>

<!-- tsParticles CDN -->
<script src="https://cdn.jsdelivr.net/npm/tsparticles-engine@3.3.0/tsparticles.engine.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/tsparticles-basic@3.3.0/tsparticles.basic.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/tsparticles-preset-links@3.3.0/tsparticles.preset.links.min.js"></script>
<script>
  // Initialize tsParticles for animated background
  window.addEventListener('DOMContentLoaded', function() {
    if (!window.tsParticles) return;
    tsParticles.load("particles-bg", {
      fullScreen: { enable: false },
      background: { color: "transparent" },
      fpsLimit: 60,
      particles: {
        number: {
          value: 90,
          density: { enable: true, area: 800 }
        },
        color: {
          value: ["#a259f7", "#f357a8", "#fff", "#7b2ff2", "#3b2667", "#ffdbf7"]
        },
        shape: { type: "circle" },
        opacity: {
          value: 0.6,
          random: true,
          anim: { enable: true, speed: 1, opacity_min: 0.2, sync: false }
        },
        size: {
          value: 4,
          random: { enable: true, minimumValue: 1 },
          anim: { enable: true, speed: 3, size_min: 1, sync: false }
        },
        links: {
          enable: true,
          distance: 130,
          color: "#a259f7",
          opacity: 0.3,
          width: 1
        },
        move: {
          enable: true,
          speed: 1.3,
          direction: "none",
          random: true,
          straight: false,
          outModes: { default: "out" }
        }
      },
      detectRetina: true
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const instances = document.querySelectorAll('[data-instance-id]');
    instances.forEach(instance => {
      const containerId = instance.dataset.instanceId;
      const isSecure = window.location.protocol === 'https:';
      const wsProtocol = isSecure ? 'wss' : 'ws';
      const wsPort = isSecure ? '' : `:<%= config.port %>`;
      const socket = new WebSocket(`${wsProtocol}://<%= config.domain %>${wsPort}/stats/${containerId}`);

      const statusElement = instance.querySelector('[data-status]');
      const statusBg = instance.querySelector('[data-status-bg]');
      const ramUsageElement = instance.querySelector('[data-ram-usage]');
      const ramLimitElement = instance.querySelector('[data-ram-limit]');
      const cpuUsageElement = instance.querySelector('[data-cpu-usage]');

      function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0.00 B';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['B', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
      }

      socket.onmessage = event => {
        let stats;
        try {
          stats = JSON.parse(event.data);
        } catch (e) {
          console.error('Error parsing JSON:', e);
          console.log('Raw data:', event.data);
          return;
        }
        if (stats.error) {
          console.error('Error fetching stats:', stats.error);
          return;
        }
        // Update RAM usage
        const ramUsageRaw = stats.memory_stats.usage / 1024;
        const ramUsage = isNaN(ramUsageRaw) ? '0 B' : formatBytes(ramUsageRaw);
        const ramLimitRaw = stats.memory_stats.limit / 1024;
        const ramLimit = isNaN(ramLimitRaw) ? '0 B' : formatBytes(ramLimitRaw);
        ramUsageElement.textContent = ramUsage + ' <%= req.translations.ramUsage %>';

        // Determine status based on RAM usage
        if (isNaN(ramUsageRaw)) {
          statusElement.className = 'text-neutral-500';
          statusElement.textContent = 'Offline';
        } else if (ramUsageRaw > 1) {
          statusBg.classList.remove('bg-neutral-600/20', 'bg-glass');
          statusBg.classList.add('bg-glass');
          statusElement.className = 'text-pink neon-text';
          statusElement.textContent = 'Online';
        }

        // Update CPU usage
        const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
        const systemCpuDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
        const cpuUsagePercent = (cpuDelta && systemCpuDelta && !isNaN(cpuDelta) && !isNaN(systemCpuDelta))
          ? ((cpuDelta / systemCpuDelta) * 100).toFixed(2) + '%'
          : '0%';
        cpuUsageElement.textContent = cpuUsagePercent + ' <%= req.translations.cpuUsage %>';
      };
    });
  });
</script>
