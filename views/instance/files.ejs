<%- include('../components/template') %>
<main id="content">
<%
   function formatLastUpdated(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      if (diffDays > 30) {
         return date.toLocaleString('en-US', { 
           year: 'numeric', 
           month: 'short', 
           day: 'numeric', 
           hour: 'numeric', 
           minute: '2-digit', 
           hour12: true 
         });
      } else {
         return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
      }
   }
%>
<%
   function getFileIcon(purpose) {
      const icons = {
        programming: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">...</svg>`,
        webDevelopment: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">...</svg>`,
        textDocument: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">...</svg>`,
        other: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5 text-neutral-400">...</svg>`
      };
      return icons[purpose] || icons.other;
   }
%>
<div class="bg-transparent">
   <div class="sm:flex sm:items-center px-8 pt-4">
      <div class="sm:flex-auto">
         <h1 class="text-base font-medium leading-6 text-white">Manage Instance</h1>
         <p class="mt-1 tracking-tight text-sm text-neutral-500">View, update and manage an instance on the Skyport panel.</p>
      </div>
      <% let query = req.query.path ? '?path=' + req.query.path : ''; %>
      <div class="mt-4 sm:ml-16 sm:mt-0 flex space-x-4">
         <input type="text" id="searchInput2" placeholder="Search files..." class="px-3 py-2 bg-transparent border border-white/5 shadow-lg focus:scale-105 transition rounded-xl text-white placeholder:text-neutral-300" />
         <a href="/instance/<%= req.params.id %>/files/create<%= query %>" class="block rounded-xl bg-white px-4 py-3 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-neutral-200 transition">Create File</a>
         <a href="/instance/<%= req.params.id %>/files/folder/create<%= query %>" class="block rounded-xl bg-white px-4 py-3 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-neutral-200 transition">Create Folder</a>
         <button id="uploadBtn" class="block rounded-xl bg-white px-4 py-2 text-center text-sm font-medium text-neutral-800 shadow-lg hover:bg-neutral-200 transition focus-visible:outline focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-neutral-500">Upload File(s)</button>
         <input type="file" id="fileInput" multiple style="display: none;">
      </div>
   </div>
</div>
<%- include('../components/instance') %>
<div class="px-4 sm:px-6 lg:px-8">
   <div class="flex">
      <div class="flex-grow">
         <h1 class="text-white text-sm">
            <a class="text-neutral-300 hover:text-neutral-200 transition" href="./files">/app/data/</a>
            <% 
               if (req.query.path) { 
                   const parts = req.query.path.split('/');
                   let currentPath = '';
                   parts.forEach((part, index) => {
                       currentPath += part;
                       if (index < parts.length - 1) {
            %>
            <a href="./files?path=<%= currentPath %>" class="text-neutral-300 hover:text-neutral-200 transition"><%= part %></a>/
            <% 
                           currentPath += '/';
                       } else {
            %>
            <span class="text-neutral-100"><%= part %></span>
            <%
                       }
                   });
               }
            %>
         </h1>
      </div>
      <p id="diskUsage" class="text-sm text-neutral-400"></p>
   </div>
   <table class="min-w-full mt-5 table-auto border-separate border border-white/5 shadow rounded-xl">
      <thead class="text-white">
         <tr>
            <th class="px-6 py-3 text-left"></th>
            <th class="px-6 py-3 text-left">File Name</th>
            <th class="px-6 py-3 text-left">Size</th>
            <th class="px-6 py-3 text-left">Last Updated</th>
            <th class="px-6 py-3 text-left">&nbsp;</th>
         </tr>
      </thead>
      <tbody>
         <% files.filter(file => file.isDirectory).forEach(function(directory) { %>
         <% let currentPath = req.query.path ? req.query.path + '/' : ''; %>
         <tr class="bg-transparent rounded-xl hover:bg-neutral-700/5 cursor-pointer transition border-none">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white border-none"></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white border-none">
               <a href="/instance/<%= req.params.id %>/files?path=<%= currentPath %><%= directory.name %>" class="flex items-center">
                  <span class="mr-2">
                     <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 mb-0.5 inline-flex mr-1.5">
                        <path d="M3.75 3A1.75 1.75 0 0 0 2 4.75v3.26a3.235 3.235 0 0 1 1.75-.51h12.5c.644 0 1.245.188 1.75.51V6.75A1.75 1.75 0 0 0 16.25 5h-4.836a.25.25 0 0 1-.177-.073L9.823 3.513A1.75 1.75 0 0 0 8.582 3H3.75Z" />
                     </svg>
                  </span>
                  <%= directory.name %>
               </a>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-300 border-none">N/A</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-300 border-none">N/A</td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium border-none relative">
               <button onclick="toggleDropdown(event, '<%= directory.name %>')" class="text-neutral-400 hover:text-white transition">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                     <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                  </svg>
               </button>
               <div id="dropdown-<%= directory.name %>" class="absolute right-0 mt-2 w-48 rounded-xl shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10 transform opacity-0 scale-95 pointer-events-none transition-all duration-200">
                  <div class="p-2" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                     <a href="#" onclick="openRenameModal('<%= directory.name %>', '<%= currentPath %>')" class="transition rounded-xl block px-4 py-2 text-sm text-neutral-700 hover:bg-neutral-100 hover:text-neutral-900 text-left" role="menuitem">Rename</a>
                     <a href="#" onclick="openDeleteModal('<%= directory.name %>', '<%= currentPath %>')" class="transition rounded-xl block px-4 py-2 text-sm text-red-600 hover:bg-red-50 text-left" role="menuitem">Delete</a>
                  </div>
               </div>
            </td>
         </tr>
         <% }); %>
         <% files.filter(file => !file.isDirectory).forEach(function(file) { %>
         <% let extension = req.query.path ? '?path=' + req.query.path : ''; %>
         <tr class="bg-transparent rounded-xl hover:bg-neutral-700/5 cursor-pointer transition border-none">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white border-none"></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white border-none">
               <a href="/instance/<%= req.params.id %>/files/view/<%= file.name %><%= extension %>" class="flex items-center">
                  <span class="mr-2">
                     <%- getFileIcon(file.purpose) %>
                  </span>
                  <%= file.name %>
               </a>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-300 border-none"><%= file.size %></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-300 border-none"><%= formatLastUpdated(file.lastUpdated) %></td>
            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium border-none relative">
               <button onclick="toggleDropdown(event, '<%= file.name %>')" class="text-neutral-400 hover:text-white transition">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                     <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                  </svg>
               </button>
               <div id="dropdown-<%= file.name %>" class="absolute right-0 mt-2 w-48 rounded-xl shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10 transform opacity-0 scale-95 pointer-events-none transition-all duration-200">
                  <div class="p-2" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                     <a href="#" onclick="openRenameModal('<%= file.name %>', '<%= extension %>')" class="transition rounded-xl block px-4 py-2 text-sm text-neutral-700 hover:bg-neutral-100 hover:text-neutral-900 text-left" role="menuitem">Rename</a>
                     <a href="#" onclick="openDeleteModal('<%= file.name %>', '<%= extension %>')" class="transition rounded-xl block px-4 py-2 text-sm text-red-600 hover:bg-red-50 text-left" role="menuitem">Delete</a>
                     <% if (file.name.toLowerCase().endsWith('.zip')) { %>
                     <a href="#" onclick="openUnzipModal('<%= file.name %>')" class="transition rounded-xl block px-4 py-2 text-sm text-purple-600 hover:bg-purple-50 text-left" role="menuitem">Unzip</a>
                     <% } %>
                  </div>
               </div>
            </td>
         </tr>
         <% }); %>
      </tbody>
   </table>
   <div class="pb-12"></div>
</div>

<!-- Upload Modal -->
<div id="uploadModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
   <div class="rounded-xl p-8 max-w-md w-full transform scale-95 transition-transform duration-300" style="background: linear-gradient(135deg, #a4508b 0%, #5f0a87 100%); box-shadow: 0 8px 32px 0 rgba(31,38,135,0.37);">
      <h2 class="text-2xl font-medium mb-4 text-white">Uploading File(s)</h2>
      <div class="mb-4">
         <div class="w-full bg-neutral-200 rounded-full h-2.5">
            <div id="uploadProgress" class="bg-purple-500 h-2.5 rounded-full" style="width: 0%"></div>
         </div>
      </div>
      <p id="uploadStatus" class="text-center text-white">Preparing upload...</p>
   </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
   <div class="bg-white rounded-xl p-8 max-w-md w-full transform scale-95 transition-transform duration-300">
      <h2 class="text-2xl font-medium mb-4 text-neutral-800">Confirm Deletion</h2>
      <p id="deleteMessage" class="mb-6 text-neutral-600"></p>
      <div class="flex justify-end space-x-4">
         <button onclick="closeDeleteModal()" class="px-5 py-2 bg-neutral-200 text-neutral-800 rounded-xl hover:bg-neutral-300 transition">Cancel</button>
         <button id="confirmDelete" class="px-5 py-2 bg-red-500 text-white rounded-xl hover:bg-red-600 transition">Delete</button>
      </div>
   </div>
</div>

<!-- Rename file modal -->
<div id="renameModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
   <div class="bg-white rounded-xl p-8 max-w-md w-full transform scale-95 transition-transform duration-300">
      <h2 class="text-2xl font-medium mb-1 text-neutral-800">Rename File</h2>
      <p class="mb-6 text-neutral-600">Please choose a new name for this file.</p>
      <input type="text" id="newFileName" class="w-full px-3 py-2 border border-neutral-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-neutral-500 focus:border-neutral-500 transition mb-2" />
      <p id="extensionWarning" class="text-yellow-600 mb-4 hidden">Warning: Changing the file extension may affect file functionality.</p>
      <div class="flex justify-end space-x-4">
         <button onclick="closeRenameModal()" class="px-5 py-2 bg-neutral-200 text-neutral-800 rounded-xl hover:bg-neutral-300 transition">Cancel</button>
         <button onclick="confirmRename()" class="px-5 py-2 bg-neutral-800 text-white rounded-xl hover:bg-neutral-700 transition">Rename</button>
      </div>
   </div>
</div>

<!-- Unzip Modal -->
<div id="unzipModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center opacity-0 pointer-events-none transition-opacity duration-300">
   <div class="bg-white rounded-xl p-8 max-w-md w-full transform scale-95 transition-transform duration-300">
      <h2 class="text-2xl font-medium mb-4 text-purple-800">Unzip File</h2>
      <p id="unzipMessage" class="mb-6 text-neutral-600"></p>
      <div class="flex justify-end space-x-4">
         <button onclick="closeUnzipModal()" class="px-5 py-2 bg-neutral-200 text-neutral-800 rounded-xl hover:bg-neutral-300 transition">Cancel</button>
         <button id="confirmUnzip" class="px-5 py-2 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition">Unzip</button>
      </div>
   </div>
</div>

<script>
// Dropdown logic
function toggleDropdown(event, fileName) {
   event.stopPropagation();
   const dropdown = document.getElementById(`dropdown-${fileName}`);
   document.querySelectorAll('[id^="dropdown-"]').forEach((el) => {
      if (el.id !== `dropdown-${fileName}` && !el.classList.contains('pointer-events-none')) {
         closeDropdown(el);
      }
   });
   if (dropdown.classList.contains('pointer-events-none')) {
      openDropdown(dropdown);
   } else {
      closeDropdown(dropdown);
   }
}
function openDropdown(dropdown) {
   dropdown.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
   dropdown.classList.add('opacity-100', 'scale-100');
}
function closeDropdown(dropdown) {
   dropdown.classList.remove('opacity-100', 'scale-100');
   dropdown.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
}
document.addEventListener('click', function(event) {
   if (!event.target.closest('td')) {
      document.querySelectorAll('[id^="dropdown-"]').forEach((dropdown) => {
         if (!dropdown.classList.contains('pointer-events-none')) {
            closeDropdown(dropdown);
         }
      });
   }
});

// File search
const searchInput2 = document.getElementById('searchInput2');
const fileRows = document.querySelectorAll('tbody tr');
searchInput2.addEventListener('input', function() {
   const searchTerm = this.value.toLowerCase();
   fileRows.forEach(row => {
      const fileName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
      if (fileName.includes(searchTerm)) {
         row.style.display = '';
      } else {
         row.style.display = 'none';
      }
   });
});

// Upload logic
document.getElementById('uploadBtn').addEventListener('click', function() {
   document.getElementById('fileInput').click();
});
document.getElementById('fileInput').addEventListener('change', function(event) {
   const files = event.target.files;
   if (files.length === 0) return;
   const formData = new FormData();
   Array.from(files).forEach(file => formData.append('files', file));
   // Open the upload modal
   const modal = document.getElementById('uploadModal');
   modal.classList.remove('opacity-0', 'pointer-events-none');
   modal.querySelector('div').classList.remove('scale-95');
   modal.querySelector('div').classList.add('scale-100');
   const xhr = new XMLHttpRequest();
   xhr.open('POST', '/instance/<%= req.params.id %>/files/upload<%= query %>', true);
   xhr.upload.onprogress = function(e) {
      if (e.lengthComputable) {
         const percentComplete = (e.loaded / e.total) * 100;
         document.getElementById('uploadProgress').style.width = percentComplete + '%';
         document.getElementById('uploadStatus').textContent = 'Uploading: ' + Math.floor(percentComplete) + '%';
      }
   };
   xhr.onload = function() {
      if (xhr.status == 200) {
         document.getElementById('uploadStatus').textContent = 'Upload complete!';
         setTimeout(() => {
            modal.classList.add('opacity-0', 'pointer-events-none');
            modal.querySelector('div').classList.remove('scale-100');
            modal.querySelector('div').classList.add('scale-95');
            window.location.reload();
         }, 1000);
      } else {
         document.getElementById('uploadStatus').textContent = 'Upload failed. Server responded with status ' + xhr.status;
         setTimeout(() => {
            modal.classList.add('opacity-0', 'pointer-events-none');
            modal.querySelector('div').classList.remove('scale-100');
            modal.querySelector('div').classList.add('scale-95');
         }, 3000);
      }
   };
   xhr.send(formData);
   document.getElementById('fileInput').value = '';
});

// Delete logic
let deleteUrl = '';
function openDeleteModal(fileName, extension) {
   const modal = document.getElementById('deleteModal');
   const message = document.getElementById('deleteMessage');
   deleteUrl = `/instance/<%= req.params.id %>/files/delete/${fileName}${extension}`;
   message.textContent = `Are you sure you want to delete ${fileName}? This is a permanent action and cannot be reversed.`;
   modal.classList.remove('opacity-0', 'pointer-events-none');
   modal.querySelector('div').classList.remove('scale-95');
   modal.querySelector('div').classList.add('scale-100');
}
function closeDeleteModal() {
   const modal = document.getElementById('deleteModal');
   modal.classList.add('opacity-0', 'pointer-events-none');
   modal.querySelector('div').classList.remove('scale-100');
   modal.querySelector('div').classList.add('scale-95');
}
document.getElementById('confirmDelete').addEventListener('click', function() {
   window.location.href = deleteUrl;
});

// Rename logic
let currentFileName = '';
let currentExtension = '';
function openRenameModal(fileName, extension) {
   const modal = document.getElementById('renameModal');
   const input = document.getElementById('newFileName');
   currentFileName = fileName;
   currentExtension = extension;
   input.value = fileName;
   modal.classList.remove('opacity-0', 'pointer-events-none');
   modal.querySelector('div').classList.remove('scale-95');
   modal.querySelector('div').classList.add('scale-100');
   input.focus();
   input.setSelectionRange(0, fileName.lastIndexOf('.'));
}
function closeRenameModal() {
   const modal = document.getElementById('renameModal');
   modal.classList.add('opacity-0', 'pointer-events-none');
   modal.querySelector('div').classList.remove('scale-100');
   modal.querySelector('div').classList.add('scale-95');
}
function confirmRename() {
   const newFileName = document.getElementById('newFileName').value.trim();
   if (newFileName && newFileName !== currentFileName) {
      const encodedNewFileName = encodeURIComponent(newFileName);
      const renameUrl = `/instance/<%= req.params.id %>/files/rename/${currentFileName}/${encodedNewFileName}${currentExtension}`;
      window.location.href = renameUrl;
   } else {
      closeRenameModal();
   }
}
document.getElementById('newFileName').addEventListener('input', function(event) {
   const warningElement = document.getElementById('extensionWarning');
   const newExtension = event.target.value.split('.').pop();
   const originalExtension = currentFileName.split('.').pop();
   if (newExtension !== originalExtension) {
      warningElement.classList.remove('hidden');
   } else {
      warningElement.classList.add('hidden');
   }
});

// Unzip Modal Logic
let unzipFileName = '';
function openUnzipModal(fileName) {
   unzipFileName = fileName;
   const modal = document.getElementById('unzipModal');
   const message = document.getElementById('unzipMessage');
   message.textContent = `Do you want to unzip "${fileName}"? This will extract its contents in the current directory.`;
   modal.classList.remove('opacity-0', 'pointer-events-none');
   modal.querySelector('div').classList.remove('scale-95');
   modal.querySelector('div').classList.add('scale-100');
}
function closeUnzipModal() {
   const modal = document.getElementById('unzipModal');
   modal.classList.add('opacity-0', 'pointer-events-none');
   modal.querySelector('div').classList.remove('scale-100');
   modal.querySelector('div').classList.add('scale-95');
}
document.getElementById('confirmUnzip').addEventListener('click', async function() {
   closeUnzipModal();
   try {
      const response = await fetch(`/instance/<%= req.params.id %>/files/unzip/${unzipFileName}<%= query %>`, {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' }
      });
      if (response.ok) {
         window.location.reload();
      } else {
         const msg = await response.text();
         alert(msg || 'Failed to unzip file.');
      }
   } catch (err) {
      alert('Error occurred while unzipping.');
   }
});
</script>
<script>
// Disk usage stats (websocket)
const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
const instanceId = '<%= req.params.id %>';
function formatBytes(bytes, decimals = 2) {
   if (bytes === 0) return '0 Bytes';
   const k = 1024;
   const dm = decimals < 0 ? 0 : decimals;
   const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
   const i = Math.floor(Math.log(bytes) / Math.log(k));
   return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}
const statsWs = new WebSocket(`${protocol}://${window.location.hostname}:${window.location.port}/stats/${instanceId}`);
statsWs.onmessage = event => {
   const stats = JSON.parse(event.data);
   if (stats.error) {
      console.error('Error fetching stats:', stats.error);
      return;
   }
   const diskUsageRaw = parseFloat(stats.volumeSize);
   const diskLimitRaw = 10 * 1024; // Assuming 10GB limit
   const diskUsagePercent = (diskUsageRaw / diskLimitRaw * 100).toFixed(2);
   document.getElementById('diskUsage').textContent = `${formatBytes(diskUsageRaw * 1024 * 1024)} / ${formatBytes(diskLimitRaw * 1024 * 1024)} (${diskUsagePercent}%)`;
}
</script>
</main>
<%- include('../components/footer') %>
