<%- include('../components/template') %>
<style>
  :root {
    --primary-color: #6366f1;
    --primary-hover: #4f46e5;
    --secondary-color: #1e293b;
    --text-primary: #f8fafc;
    --text-secondary: #94a3b8;
    --bg-primary: #0f172a;
    --bg-secondary: #1e293b;
    --border-color: #334155;
    --success-color: #10b981;
    --warning-color: #f59e0b;
    --error-color: #ef4444;
  }
  .plugin-manager-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1.5rem;
    color: var(--text-primary);
  }
  .plugin-header {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
  }
  @media (min-width: 768px) {
    .plugin-header {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
  }
  .plugin-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }
  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    color: var(--text-primary);
    font-size: 1rem;
    transition: all 0.2s ease;
  }
  .search-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
  }
  .search-input::placeholder {
    color: var(--text-secondary);
  }
  .plugin-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  .plugin-card {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 0.75rem;
    overflow: hidden;
    transition: all 0.2s ease;
    display: flex;
    flex-direction: column;
  }
  .plugin-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    border-color: var(--primary-color);
  }
  .plugin-card-content {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  .plugin-card-header {
    display: flex;
    align-items: flex-start;
    margin-bottom: 1rem;
  }
  .plugin-icon {
    width: 48px;
    height: 48px;
    border-radius: 0.5rem;
    object-fit: cover;
    margin-right: 1rem;
    flex-shrink: 0;
  }
  .plugin-name {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
    word-break: break-word;
  }
  .plugin-author {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
  }
  .plugin-meta {
    display: flex;
    align-items: center;
    margin-top: 0.5rem;
    gap: 0.75rem;
  }
  .plugin-rating {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    color: var(--warning-color);
  }
  .plugin-downloads {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
  .plugin-description {
    margin-top: 1rem;
    font-size: 0.9375rem;
    color: var(--text-secondary);
    line-height: 1.5;
    flex: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .plugin-actions {
    display: flex;
    gap: 0.75rem;
    margin-top: 1.5rem;
  }
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.625rem 1rem;
    border-radius: 0.5rem;
    font-size: 0.9375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    border: none;
    flex: 1;
  }
  .btn-primary {
    background-color: var(--primary-color);
    color: white;
  }
  .btn-primary:hover {
    background-color: var(--primary-hover);
  }
  .btn-secondary {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
  }
  .btn-secondary:hover {
    background-color: var(--bg-secondary);
  }
  .btn-icon {
    margin-right: 0.5rem;
  }
  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    grid-column: 1 / -1;
  }
  .loading-spinner {
    width: 3rem;
    height: 3rem;
    border: 4px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    border-top-color: var(--primary-color);
    animation: spin 1s linear infinite;
    margin-bottom: 1.5rem;
  }
  .loading-text {
    color: var(--text-secondary);
    font-size: 1.125rem;
  }
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
  }
  .load-more-btn {
    background-color: var(--primary-color);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-weight: 500;
    transition: all 0.2s ease;
    border: none;
    cursor: pointer;
  }
  .load-more-btn:hover {
    background-color: var(--primary-hover);
    transform: translateY(-2px);
  }
  .load-more-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }
  .empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    color: var(--text-secondary);
  }
  .empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--border-color);
  }
  @media (max-width: 640px) {
    .plugin-grid {
      grid-template-columns: 1fr;
    }
    .plugin-actions {
      flex-direction: column;
    }
    .btn {
      width: 100%;
    }
  }
</style>
<main id="content">
  <div class="plugin-manager-container">
    <div class="plugin-header">
      <h1 class="plugin-title">Plugins Manager</h1>
      <input 
        type="text" 
        id="searchInput" 
        placeholder="Search plugins..." 
        class="search-input"
        autocomplete="off"
      />
    </div>
    <div class="plugin-grid" id="pluginContainer">
      <div class="loading-container" id="loading">
        <div class="loading-spinner"></div>
        <div class="loading-text">Loading plugins...</div>
      </div>
    </div>
    <div class="pagination">
      <button id="loadMore" class="load-more-btn" disabled>
        Load More Plugins
      </button>
    </div>
  </div>
</main>
<script>
  // Configuration
  const API_URL = "https://api.spiget.org/v2/resources/free";
  const ITEMS_PER_PAGE = 12;
  let currentPage = 0;
  let allPlugins = [];
  let isLoading = false;
  let hasMore = true;
  // DOM Elements
  const pluginContainer = document.getElementById("pluginContainer");
  const searchInput = document.getElementById("searchInput");
  const loadMoreBtn = document.getElementById("loadMore");
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    fetchPlugins();
    searchInput.addEventListener('input', debounce(filterPlugins, 300));
    loadMoreBtn.addEventListener('click', fetchPlugins);
  });
  async function fetchPlugins() {
    if (isLoading || !hasMore) return;
    isLoading = true;
    currentPage++;
    try {
      showLoading();
      const response = await fetch(
        `${API_URL}?size=${ITEMS_PER_PAGE}&page=${currentPage}&sort=-downloads`
      );
      if (!response.ok) throw new Error('Failed to fetch plugins');
      const plugins = await response.json();
      if (!Array.isArray(plugins)) throw new Error('Invalid response format');
      if (plugins.length < ITEMS_PER_PAGE) {
        hasMore = false;
        loadMoreBtn.disabled = true;
        loadMoreBtn.textContent = 'No more plugins';
      }
      allPlugins = [...allPlugins, ...plugins];
      renderPlugins(allPlugins);
    } catch (error) {
      hasMore = false;
      loadMoreBtn.disabled = true;
      loadMoreBtn.textContent = 'Error loading plugins';
    } finally {
      isLoading = false;
      hideLoading();
    }
  }
  function renderPlugins(plugins) {
    if (!plugins.length && currentPage > 1) {
      pluginContainer.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">ðŸ˜•</div>
          <h3>No plugins found</h3>
          <p>Try adjusting your search or check your connection</p>
        </div>
      `;
      return;
    }
    pluginContainer.innerHTML = plugins.map(plugin => `
      <div class="plugin-card" data-id="${plugin.id}">
        <div class="plugin-card-content">
          <div class="plugin-card-header">
            <div class="plugin-icon" style="background: #1e293b; display: flex; align-items: center; justify-content: center;">
              ðŸ§©
            </div>
            <div>
              <h3 class="plugin-name">${escapeHtml(plugin.name)}</h3>
              <p class="plugin-author">by ${plugin.author ? escapeHtml(plugin.author.name) : 'Unknown'}</p>
            </div>
          </div>
          <div class="plugin-meta">
            <span class="plugin-rating">
              â˜… ${plugin.rating ? plugin.rating.average.toFixed(1) : 'N/A'}
            </span>
            <span class="plugin-downloads">
              â†“ ${plugin.downloads ? formatNumber(plugin.downloads) : '0'}
            </span>
          </div>
          <p class="plugin-description">
            ${plugin.description ? truncate(escapeHtml(plugin.description), 120) : 'No description available.'}
          </p>
          <div class="plugin-actions">
            <a href="https://www.spigotmc.org/resources/${plugin.id}" 
               target="_blank" 
               rel="noopener noreferrer"
               class="btn btn-secondary">
              Details
            </a>
          </div>
        </div>
      </div>
    `).join('');
  }
  function filterPlugins() {
    const searchTerm = searchInput.value.trim().toLowerCase();
    if (!searchTerm) {
      renderPlugins(allPlugins);
      return;
    }
    const filtered = allPlugins.filter(plugin => 
      (plugin.name && plugin.name.toLowerCase().includes(searchTerm)) ||
      (plugin.author && plugin.author.name && plugin.author.name.toLowerCase().includes(searchTerm)) ||
      (plugin.description && plugin.description.toLowerCase().includes(searchTerm))
    );
    renderPlugins(filtered);
  }
  function showLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.style.display = 'flex';
    loadMoreBtn.disabled = true;
  }
  function hideLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.style.display = 'none';
    if (hasMore) {
      loadMoreBtn.disabled = false;
    }
  }
  function debounce(func, wait) {
    let timeout;
    return function() {
      const context = this;
      const args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), wait);
    };
  }
  function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
  function truncate(text, length) {
    if (!text) return '';
    if (text.length <= length) return text;
    return text.substring(0, length) + '...';
  }
  function formatNumber(num) {
    if (!num) return '0';
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
</script>
