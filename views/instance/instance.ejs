<%- include('../components/template') %>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.js"
        integrity="sha512-2PRgAav8Os8vLcOAh1gSaDoNLe1fAyq8/G3QSdyjFFD+OqNjLeHE/8q4+S4MEZgPsuo+itHopj+hJvqS8XUQ8A=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/xterm.min.css"
        integrity="sha512-iLYuqv+v/P4u9erpk+KM83Ioe/l7SEmr7wB6g+Kg1qmEit8EShDKnKtLHlv2QXUp7GGJhmqDI+1PhJYLTsfb8w=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/attach/attach.min.js"
        integrity="sha512-43J76SR5UijcuJTzs73z8NpkyWon8a8EoV+dX6obqXW7O26Yb268H2vP6EiJjD7sWXqxS3G/YOqPyyLF9fmqgA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/3.14.5/addons/fit/fit.min.js"
        integrity="sha512-+wh8VA1djpWk3Dj9/IJDu6Ufi4vVQ0zxLv9Vmfo70AbmYFJm0z3NLnV98vdRKBdPDV4Kwpi7EZdr8mDY9L8JIA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <style>
        body, html {
            min-height: 100%;
            height: 100%;
            margin: 0;
            background: linear-gradient(135deg, #7f53ac 0%, #647dee 100%);
            background-attachment: fixed;
        }
        main#content {
            background: transparent;
        }
        canvas {
            position: absolute;
            left: 0;
            top: 0;
            width: 100% !important;
            height: 100% !important;
        }
        .rounded-xl.bg-\[\#171717\]\/50,
        .rounded-xl.bg-\[\#171717\]\/50 {
            background: rgba(119, 41, 184, 0.6) !important;
        }
        .bg-transparent {
            background: transparent !important;
        }
        #terminal, .bg-\[\#101010\] {
            background: rgba(47, 27, 77, 0.92) !important;
        }
        .rounded-xl.bg-red-800\/10 {
            background: rgba(192, 132, 252, 0.1) !important;
            border: 1px solid rgba(168, 85, 247, 0.25) !important;
        }
        .bg-emerald-600, .hover\:bg-emerald-500 {
            background: linear-gradient(90deg, #b224ef 0%, #7579ff 100%) !important;
        }
        .hover\:bg-emerald-500 {
            filter: brightness(1.15);
        }
        .bg-white\/20, .hover\:bg-white\/25 {
            background: rgba(168, 85, 247, 0.2) !important;
        }
        .hover\:bg-white\/25 {
            background: rgba(168, 85, 247, 0.3) !important;
        }
        .bg-red-600, .hover\:bg-red-500 {
            background: linear-gradient(90deg, #a4508b 0%, #5f0a87 100%) !important;
        }
        .hover\:bg-red-500 {
            filter: brightness(1.1);
        }
        .bg-white\/5.backdrop-blur {
            background: rgba(168, 85, 247, 0.4) !important;
            border: 1px solid rgba(168, 85, 247, 0.2) !important;
            box-shadow: 0 8px 32px 0 rgba(80, 0, 130, 0.25);
        }
        .shadow, .shadow-lg, .shadow-xl {
            box-shadow: 0 4px 24px 0 rgba(168, 85, 247, 0.15), 0 1.5px 5px 0 rgba(80, 0, 130, 0.10) !important;
        }
        .text-emerald-500, .text-emerald-100 {
            color: #c084fc !important;
        }
        .text-red-500, .text-red-100, .text-red-400 {
            color: #b227ef !important;
        }
        .text-neutral-400, .text-neutral-500 {
            color: #e0d0ef !important;
        }
        .text-white {
            color: #fff !important;
        }
        .bg-\[\#101010\] {
            background: rgba(47, 27, 77, 0.92) !important;
        }
        #input[type='text'] {
            background: rgba(47, 27, 77, 0.92) !important;
            border: 1px solid rgba(168, 85, 247, 0.25);
            color: #fff;
        }
        ::selection {
            background: #a855f7;
            color: #fff;
        }
        /* Uptime card extra styling */
        #uptimeCard {
            background: rgba(119, 41, 184, 0.6) !important;
        }
    </style>
    <main class="overflow-hidden" id="content">
        <% if (Array.isArray(files) && files.length > 0 && !files.some(file => file.name === 'eula.txt')) { %>
            <% if (instance.imageData.features && instance.imageData.features.includes('eula')) { %>
                <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-60 z-50">
                    <div class="bg-white/5 backdrop-blur py-8 px-8 rounded-2xl shadow-lg w-1/2 h-48 border-2 border-purple-400">
                        <p class="text-white text-lg font-semibold">Do you accept the EULA?</p>
                        <p class="text-sm text-neutral-400">By pressing this button you agree to the <a class="text-white underline" href="https://account.mojang.com/documents/minecraft_eula">Mojang EULA</a>.</p>
                        <button 
                        onclick="axios.post('/instance/<%= req.params.id %>/imagefeatures/eula')
                            .then(response => {
                                if (response.status === 200) {
                                    location.reload();
                                }
                            })
                            .catch(error => {
                                console.error('There was an error!', error);
                            });" 
                        class="mt-8 bg-emerald-600 font-sm text-white px-4 font-medium transition py-2 rounded-2xl hover:bg-emerald-500 shadow-lg">
                        Accept
                        </button>
                    </div>
                </div>
            <% } %>
        <% } %>

        <div class="bg-transparent">
            <div class="sm:flex sm:items-center px-8 pt-4">
                <div class="sm:flex-auto">
                    <h1 class="text-base font-medium leading-6 text-white"><%= req.translations.manageInstance %></h1>
                    <p class="mt-1 tracking-tight text-sm text-neutral-500"><%= req.translations.manageInstanceText %></p>
                </div>
                <div class="mt-4 sm:ml-16 sm:mt-0 sm:flex gap-2.5">
                    <button id="startButton" type="button"
                        class="block rounded-xl bg-emerald-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-emerald-500 transition focus-visible:outline focus-visible:outline-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                            class="size-4 inline-flex mr-1 text-emerald-100 mb-0.5">
                            <path fill-rule="evenodd"
                                d="M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z"
                                clip-rule="evenodd" />
                        </svg>
                        <%= req.translations.start %>
                    </button>
                    <button id="restartButton" type="button"
                        class="block rounded-xl bg-white/20 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-white/25 transition focus-visible:outline focus-visible:outline-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                            class="size-4 inline-flex mr-1 text-zinc-200 mb-0.5">
                            <path fill-rule="evenodd"
                                d="M4.755 10.059a7.5 7.5 0 0 1 12.548-3.364l1.903 1.903h-3.183a.75.75 0 1 0 0 1.5h4.992a.75.75 0 0 0 .75-.75V4.356a.75.75 0 0 0-1.5 0v3.18l-1.9-1.9A9 9 0 0 0 3.306 9.67z"
                                clip-rule="evenodd" />
                        </svg>
                        <%= req.translations.restart %>
                    </button>
                    <button id="stopButton" type="button"
                        class="block rounded-xl bg-red-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-red-500 transition focus-visible:outline focus-visible:outline-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                            class="size-4 inline-flex mr-1 text-red-100 mb-0.5">
                            <path fill-rule="evenodd"
                                d="M4.5 7.5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9Z"
                                clip-rule="evenodd" />
                        </svg>
                        <%= req.translations.stop %>
                    </button>
                </div>
            </div>
        </div>
        <%- include('../components/instance') %>
        <div class="mt-8 ml-8 mb-4">
            <dl class="mt-5 grid grid-cols-1 gap-5 sm:grid-cols-4 mr-8">
                <div class="overflow-hidden rounded-xl bg-[#171717]/50 px-4 py-5 shadow sm:p-6 flex items-center">
                    <div class="flex-grow">
                        <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.address %></dt>
                        <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                            <span>
                                <%= instance.Node.address %><span class="text-neutral-400">:<%= instance.Primary %></span>
                            </span>
                        </dd>
                    </div>
                    <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M240,120[...]
                    </div>
                </div>
                <div class="overflow-hidden rounded-xl bg-[#171717]/50 px-4 py-5 shadow sm:p-6 flex items-center">
                    <div class="flex-grow">
                        <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.image %></dt>
                        <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                            <span>
                                <%= instance.Image %>
                            </span>
                        </dd>
                    </div>
                    <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M243.31,[...]
                    </div>
                </div>
                <div class="overflow-hidden rounded-xl bg-[#171717]/50 px-4 py-5 shadow sm:p-6 flex items-center">
                    <div class="flex-grow">
                        <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.node %></dt>
                        <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                            <%= instance.Node.name %> <span class="text-neutral-500">(<%= instance.Node.address %>)</span>
                        </dd>
                    </div>
                    <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M208,40H[...]
                    </div>
                </div>
                <div class="overflow-hidden rounded-xl bg-[#171717]/50 px-4 py-5 shadow sm:p-6 flex items-center">
                    <div class="flex-grow">
                        <dt class="truncate text-sm font-medium text-neutral-400"><%= req.translations.identifier %></dt>
                        <dd class="mt-1 text-lg font-medium tracking-tight text-white">
                            <%= req.params.id %>
                        </dd>
                    </div>
                    <div class="ml-4 shadow border border-white/10 rounded-xl p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor" class="h-6 w-6 text-neutral-400"><rect width="256" height="256" fill="none"/><path d="M116.25,[...]
                    </div>
                </div>
            </dl>
        </div>
        <div class="rounded-xl bg-red-800/10 px-4 py-6 mt-8 ml-8 mb-8 mr-8 hidden" id="daemonIsDown">
            <div class="flex">
                <div class="flex-shrink-0 ml-1.5">
                    <svg class="animate-spin mt-2 h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg"
                        fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                        </circle>
                        <path class="opacity-75" fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                        </path>
                    </svg>
                </div>
                <div class="ml-5">
                    <h3 class="text-sm font-medium text-red-400"><%= req.translations.connectionFailure %></h3>
                    <div class="text-sm text-red-400/50">
                        <p><%= req.translations.connectionFailureText %></p>
                    </div>
                </div>
            </div>
        </div>
        <div class="flex flex-col lg:flex-row px-8">
            <!-- Left side: Console -->
            <div class="w-full lg:w-2/3 lg:pr-5">
                <div class="bg-[#101010] rounded-t-xl p-4">
                    <div id="terminal" class="overflow-x-auto whitespace-pre-wrap"></div>
                </div>
                <input id="input" type="text" placeholder="<%= req.translations.SendACommand %>"
                    class="w-full px-4 py-3 bg-[#101010] text-white rounded-b-xl text-sm border-t border-transparent focus:ring-2 focus:focus:ring-transparent focus:border-transparent placeholder:font-normal placeholder:text-neutral-400" />
            </div>
            <!-- Right side: Stats Cards -->
            <div class="w-full lg:w-1/3 mt-4 lg:mt-0 space-y-4">
                <!-- Status Card -->
                <div class="bg-[#171717]/50 rounded-xl px-4 py-5 shadow sm:p-6 h-24 relative overflow-hidden">
                    <canvas id="statusChart" class="absolute inset-0 w-full h-full"></canvas>
                    <div class="relative z-10">
                        <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.status %></h2>
                        <p id="status" class="mt-1 text-lg font-medium tracking-tight text-white">-</p>
                    </div>
                </div>
                <!-- RAM Usage Card -->
                <div class="bg-[#171717]/50 rounded-xl px-4 py-5 shadow sm:p-6 h-24 relative overflow-hidden">
                    <canvas id="ramChart" class="absolute inset-0 w-full h-full"></canvas>
                    <div class="relative z-10">
                        <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.ramUsage %></h2>
                        <p id="ramUsage" class="mt-1 text-lg font-medium tracking-tight text-white"></p>
                    </div>
                </div>
                <!-- CPU Usage Card -->
                <div class="bg-[#171717]/50 rounded-xl px-4 py-5 shadow sm:p-6 h-24 relative overflow-hidden">
                    <canvas id="cpuChart" class="absolute inset-0 w-full h-full"></canvas>
                    <div class="relative z-10">
                        <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.cpuUsage %></h2>
                        <p id="cpuUsage" class="mt-1 text-lg font-medium tracking-tight text-white"></p>
                    </div>
                </div>
                <!-- Disk Usage Card -->
                <div class="bg-[#171717]/50 rounded-xl px-4 py-5 shadow sm:p-6 h-24 relative overflow-hidden">
                    <canvas id="diskChart" class="absolute inset-0 w-full h-full hidden"></canvas>
                    <div class="relative z-10">
                        <h2 class="text-sm font-medium text-neutral-400"><%= req.translations.diskUsage %></h2>
                        <p id="diskUsage" class="mt-1 text-lg font-medium tracking-tight text-white"></p>
                    </div>
                </div>
                <!-- Uptime Card -->
                <div id="uptimeCard" class="rounded-xl px-4 py-5 shadow sm:p-6 h-24 relative overflow-hidden">
                    <div class="relative z-10">
                        <h2 class="text-sm font-medium text-neutral-400">Uptime</h2>
                        <p id="uptime" class="mt-1 text-lg font-medium tracking-tight text-white">-</p>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <script>
    console.log('<%= instance.VolumeId %>');

    var baseTheme = {
        foreground: '#f7eaff',
        background: '#2f1b4d',
        selection: '#a855f733',
        black: '#2d1249',
        brightBlack: '#3a2060',
        red: '#C084FC',
        green: '#B792FF',
        yellow: '#E0C3FC',
        blue: '#9572FC',
        magenta: '#A855F7',
        cyan: '#B224EF',
        white: '#e0d0ef',
        brightBlack: 'rgba(255, 255, 255, 0.15)',
        brightRed: '#F472B6',
        brightGreen: '#B9F6CA',
        brightYellow: '#FDE68A',
        brightBlue: '#A5B4FC',
        brightMagenta: '#D8B4FE',
        brightCyan: '#B5F5F6',
        brightWhite: '#fff',
    };

    let ws;
    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
    const instanceId = '<%= req.params.id %>';
    const maxCommands = 10;
    let commandHistory = [];
    let currentCommandIndex = -1;

    function initWebSocket() {
        const port = window.location.port ? `:${window.location.port}` : '';
        ws = new WebSocket(`${protocol}://${window.location.hostname}${port}/console/${instanceId}`);
        ws.onopen = () => {
            console.log('WebSocket connected!');
        };
        ws.onmessage = handleWebSocketMessage;
        ws.onclose = () => {
            console.log('WebSocket connection closed, attempting to reconnect...');
            setTimeout(initWebSocket, 3000);
        };
        ws.onerror = (error) => {
            console.log('WebSocket encountered an error:', error, 'Attempting to reconnect...');
            setTimeout(initWebSocket, 5000);
        };
    }

    function handleWebSocketMessage(msg) {
        const lines = msg.data.split('\n');
        let isFirstLine = true;
        let previousLineWasEmpty = false;

        lines.forEach(line => {
            const trimmedLine = line.trim();
            if (trimmedLine === '' && previousLineWasEmpty) {
                return;
            }
            if (!isFirstLine && !previousLineWasEmpty) {
                term.write('\r\n');
            }

            term.write('\x1b[0m' + trimmedLine);

            if (trimmedLine.includes("state:")) {
                term.write('\r\n\u001b[1m\u001b[33m[panel] \u001b[0mreconnecting socket, hold on...\r\n');
                term.clear();
                ws.close();
            }

            if (trimmedLine.includes("skyportd instance appears to be down")) {
                ws.close();
                daemonIsDown.classList.remove('hidden');
            } else {
                daemonIsDown.classList.add('hidden');
            }

            isFirstLine = false;
            previousLineWasEmpty = (trimmedLine === '');
        });
    }

    function setupTerminal() {
        term = new Terminal({
            disableStdin: true,
            allowProposedApi: true,
            lineHeight: 1.35,
            rows: 19,
            cols: 100,
            fontFamily: 'Menlo, monospace',
            theme: baseTheme,
            allowTransparency: true,
            fontSize: 12,
        });
        term.open(document.getElementById('terminal'));
    }

    function sendCommand() {
        const inputElement = document.getElementById('input');
        const command = inputElement.value.trim();
        if (command && ws) {
            term.write('\u001b[1m\u001b[33m~ \u001b[0m' + command + '\r\n');
            ws.send(JSON.stringify({
                event: 'cmd',
                command: command,
                containerId: instanceId
            }));

            // Save command in history
            if (commandHistory.length === maxCommands) {
                commandHistory.shift();
            }
            commandHistory.push(command);
            currentCommandIndex = commandHistory.length;

            inputElement.value = '';
        }
    }

    function handleKeyUp(event) {
        if (event.key === 'ArrowUp') {
            if (currentCommandIndex > 0) {
                currentCommandIndex--;
                document.getElementById('input').value = commandHistory[currentCommandIndex];
            }
            event.preventDefault();
        } else if (event.key === 'ArrowDown') {
            if (currentCommandIndex < commandHistory.length - 1) {
                currentCommandIndex++;
                document.getElementById('input').value = commandHistory[currentCommandIndex];
            } else {
                currentCommandIndex = commandHistory.length;
                document.getElementById('input').value = '';
            }
            event.preventDefault();
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        setupTerminal();
        initWebSocket();

        const inputElement = document.getElementById('input');
        inputElement.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                sendCommand();
            }
        });

        inputElement.addEventListener('keydown', handleKeyUp);

        document.getElementById('startButton').addEventListener('click', function () {
            if (ws) {
                ws.send(JSON.stringify({
                    event: 'power:start',
                    containerId: instanceId
                }));
            }
        });

        document.getElementById('stopButton').addEventListener('click', function () {
            if (ws) {
                ws.send(JSON.stringify({
                    event: 'power:stop',
                    containerId: instanceId
                }));
            }
        });

        document.getElementById('restartButton').addEventListener('click', function () {
            if (ws) {
                ws.send(JSON.stringify({
                    event: 'power:restart',
                    containerId: instanceId
                }));
            }
        });
    });

        const statsWs = new WebSocket(`${protocol}://${window.location.hostname}:${window.location.port}/stats/${instanceId}`);

        function formatBytes(bytes, decimals = 2) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const dm = decimals < 0 ? 0 : decimals;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        }

        function formatUptime(seconds) {
            if (!seconds || isNaN(seconds)) return "-";
            const d = Math.floor(seconds / 86400);
            const h = Math.floor((seconds % 86400) / 3600);
            const m = Math.floor((seconds % 3600) / 60);
            const s = Math.floor(seconds % 60);
            return (
                (d > 0 ? d + "d " : "") +
                (h > 0 ? h + "h " : "") +
                (m > 0 ? m + "m " : "") +
                (s > 0 ? s + "s" : "")
            ).trim();
        }

        function createBackgroundChart(canvasId, type = 'line') {
            return new Chart(document.getElementById(canvasId).getContext('2d'), {
                type: type,
                data: {
                    labels: [],
                    datasets: [{
                        data: [],
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        backgroundColor: 'rgba(255, 255, 255, 0.05)',
                        borderWidth: 1,
                        pointRadius: 0,
                        fill: true,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: false }
                    },
                    scales: {
                        x: { display: false },
                        y: { display: false }
                    },
                    animation: false
                }
            });
        }

        const statusChart = createBackgroundChart('statusChart');
        const ramChart = createBackgroundChart('ramChart');
        const cpuChart = createBackgroundChart('cpuChart');
        const diskChart = createBackgroundChart('diskChart', 'doughnut');

        statsWs.onmessage = event => {
            const stats = JSON.parse(event.data);
            if (stats.error) {
                console.error('Error fetching stats:', stats.error);
                return;
            }

            // Update RAM usage
                if (isNaN(stats.memory_stats.usage)) {
                    stats.memory_stats.usage = 0;
                }
                if (isNaN(stats.memory_stats.limit)) {
                    stats.memory_stats.limit = <%= instance.Memory * 1024 * 1024 %>;
                }

                const ramUsageRaw = stats.memory_stats.usage / 1024 / 1024;
                const ramLimitRaw = stats.memory_stats.limit / 1024 / 1024;

                const ramUsagePercent = (ramLimitRaw > 0) ? ((ramUsageRaw / ramLimitRaw) * 100).toFixed(2) : '0.00';
                document.getElementById('ramUsage').textContent = `${ramUsagePercent}% (${formatBytes(stats.memory_stats.usage)} / ${formatBytes(stats.memory_stats.limit)})`;


                if (stats.memory_stats.usage > 0) {
                ramChart.data.labels.push('');
                ramChart.data.datasets[0].data.push(ramUsagePercent);


                if (ramChart.data.labels.length > 20) {
                    ramChart.data.labels.shift();
                    ramChart.data.datasets[0].data.shift();
                }


                    ramChart.update();
                }

            // Update CPU usage
            const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
            const systemCpuDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
            let cpuUsagePercent = ((cpuDelta / systemCpuDelta) * 100).toFixed(2);

            if (isNaN(cpuUsagePercent)) {
                cpuUsagePercent = 0;
            }

            document.getElementById('cpuUsage').textContent = `${cpuUsagePercent}%`;
            
            if (cpuUsagePercent > 0) {

            cpuChart.data.labels.push('');
            cpuChart.data.datasets[0].data.push(cpuUsagePercent);
            if (cpuChart.data.labels.length > 20) {
                cpuChart.data.labels.shift();
                cpuChart.data.datasets[0].data.shift();
            }
            cpuChart.update();
        }

            // Update Disk usage
            const diskUsageRaw = parseFloat(stats.volumeSize);
            const diskLimitRaw = 10 * 1024; // Assuming 10GB limit
            const diskUsagePercent = (diskUsageRaw / diskLimitRaw * 100).toFixed(2);
            document.getElementById('diskUsage').textContent = `${diskUsagePercent}% (${formatBytes(diskUsageRaw * 1024 * 1024)} / ${formatBytes(diskLimitRaw * 1024 * 1024)})`;

            // Update Status
            const statusElement = document.getElementById('status');
            if (ramUsageRaw > 1) {
                statusElement.textContent = 'Online';
                statusElement.className = 'mt-1 text-lg font-medium tracking-tight text-emerald-500';
                statusChart.data.datasets[0].backgroundColor = 'rgba(16, 185, 129, 0.1)';
                statusChart.data.datasets[0].borderColor = 'rgba(16, 185, 129, 0.2)';
            } else {
                statusElement.textContent = 'Offline';
                statusElement.className = 'mt-1 text-lg font-medium tracking-tight text-red-500';
                statusChart.data.datasets[0].backgroundColor = 'rgba(239, 68, 68, 0.1)';
                statusChart.data.datasets[0].borderColor = 'rgba(239, 68, 68, 0.2)';
            }
            statusChart.data.labels = [''];
            statusChart.data.datasets[0].data = [100];
            statusChart.update();

            // Update Uptime
            if(stats.uptime !== undefined) {
                document.getElementById('uptime').textContent = formatUptime(stats.uptime);
            } else if(stats.State && stats.State.StartedAt) {
                // fallback: calculate from StartedAt ISO string if available
                let started = Date.parse(stats.State.StartedAt);
                if (!isNaN(started)) {
                    let sec = Math.floor((Date.now() - started) / 1000);
                    document.getElementById('uptime').textContent = formatUptime(sec);
                } else {
                    document.getElementById('uptime').textContent = "-";
                }
            } else {
                document.getElementById('uptime').textContent = "-";
            }
        };
    </script>
    <%- include('../components/footer') %>
