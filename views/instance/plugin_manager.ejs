<%- include('../components/template') %>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<style>
  :root {
    --primary-gradient: linear-gradient(90deg, #6366f1 0%, #0ea5e9 100%);
    --primary-hover: linear-gradient(90deg, #0ea5e9 0%, #6366f1 100%);
    --secondary-bg: #1e293b;
    --secondary-border: #334155;
    --text-primary: #f8fafc;
    --text-secondary: #94a3b8;
    --success-color: #10b981;
    --warning-color: #f59e0b;
    --error-color: #ef4444;
    --shadow-main: 0 2px 16px rgba(99,102,241,.13), 0 1.5px 6px rgba(14,165,233,0.07);
    --shadow-hover: 0 8px 24px rgba(99,102,241,.16), 0 2px 16px rgba(14,165,233,0.09);
    --font-main: 'Inter', sans-serif;
  }

  body {
    font-family: var(--font-main);
    background: linear-gradient(120deg, #6366f1 0%, #0ea5e9 100%);
    background-size: 400% 400%;
    animation: gradientBG 15s ease infinite;
  }
  @keyframes gradientBG {
    0% {background-position: 0% 50%;}
    50% {background-position: 100% 50%;}
    100% {background-position: 0% 50%;}
  }

  .plugin-manager-container {
    max-width: 1400px;
    margin: 0 auto;
    margin-top: 3rem;
    padding: 2.5rem 1.5rem;
    background: rgba(16, 18, 27, 0.85);
    border-radius: 2rem;
    box-shadow: 0 16px 32px 0 rgba(50,50,93,.2);
    backdrop-filter: blur(14px);
    color: var(--text-primary);
  }

  .plugin-header {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  @media (min-width: 768px) {
    .plugin-header {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
    }
  }
  .plugin-title {
    font-family: var(--font-main);
    font-weight: 800;
    font-size: 2.4rem;
    letter-spacing: -.03em;
    color: #fff;
    text-shadow: 0 2px 16px #6366f1cc;
    margin: 0;
  }
  .search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    background: rgba(30, 41, 59, 0.85);
    border: 1.5px solid var(--secondary-border);
    border-radius: 0.7rem;
    color: var(--text-primary);
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
    font-family: var(--font-main);
    box-shadow: var(--shadow-main);
  }
  .search-input:focus {
    outline: none;
    border-color: #6366f1;
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
  }
  .search-input::placeholder {
    color: var(--text-secondary);
  }

  .plugin-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  .plugin-card {
    opacity: 0;
    transform: translateY(40px) scale(.98);
    animation: cardFadeIn .7s cubic-bezier(.7, .2, .2, 1) forwards;
    animation-delay: .08s;
    box-shadow: var(--shadow-main);
    transition: box-shadow .35s, transform .2s;
    background: rgba(30, 41, 59, 0.82);
    border-radius: 1.1rem;
    border: 1.5px solid var(--secondary-border);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    backdrop-filter: blur(8px);
  }
  @keyframes cardFadeIn {
    to {opacity: 1; transform: translateY(0) scale(1);}
  }
  .plugin-card:hover {
    transform: translateY(-8px) scale(1.04);
    box-shadow: var(--shadow-hover);
    border-color: #6366f1;
    z-index: 3;
  }
  .plugin-card-content {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  .plugin-card-header {
    display: flex;
    align-items: flex-start;
    margin-bottom: 1rem;
  }
  .plugin-icon {
    width: 48px;
    height: 48px;
    border-radius: 0.7rem;
    object-fit: cover;
    margin-right: 1.1rem;
    flex-shrink: 0;
    box-shadow: 0 2px 8px 0 #1e293b55;
    background: #1e293b;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
  }
  .plugin-name {
    font-size: 1.18rem;
    font-weight: 700;
    margin: 0;
    color: var(--text-primary);
    word-break: break-word;
    font-family: var(--font-main);
  }
  .plugin-author {
    font-size: 0.89rem;
    color: var(--text-secondary);
    margin-top: 0.24rem;
  }
  .plugin-meta {
    display: flex;
    align-items: center;
    margin-top: 0.55rem;
    gap: 0.85rem;
  }
  .plugin-rating {
    display: flex;
    align-items: center;
    font-size: 0.95rem;
    color: var(--warning-color);
    font-weight: 600;
  }
  .plugin-downloads {
    display: flex;
    align-items: center;
    font-size: 0.93rem;
    color: var(--text-secondary);
  }
  .plugin-description {
    margin-top: 1rem;
    font-size: 1rem;
    color: var(--text-secondary);
    line-height: 1.5;
    flex: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .plugin-actions {
    display: flex;
    gap: 0.75rem;
    margin-top: 1.5rem;
  }
  /* Modern Button Styles */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.7rem 1.25rem;
    border-radius: 0.7rem;
    font-size: 1rem;
    font-weight: 600;
    font-family: var(--font-main);
    cursor: pointer;
    border: none;
    transition: background .22s, color .18s, box-shadow .22s, transform .15s;
    box-shadow: 0 2px 10px rgba(99,102,241,0.13);
    outline: none;
    position: relative;
    overflow: hidden;
  }
  .btn:active {
    transform: scale(0.97);
  }
  .btn-primary {
    background: var(--primary-gradient);
    color: white;
    border: none;
    box-shadow: 0 2px 16px rgba(99, 102, 241, .18);
    z-index: 2;
  }
  .btn-primary:hover, .btn-primary:focus {
    background: var(--primary-hover);
    box-shadow: 0 2px 22px rgba(99, 102, 241, .24);
    filter: brightness(1.09);
  }
  .btn-secondary {
    background: var(--secondary-bg);
    color: var(--text-primary);
    border: 1.5px solid var(--secondary-border);
    z-index: 2;
  }
  .btn-secondary:hover, .btn-secondary:focus {
    background: #232946;
    border-color: #6366f1;
    color: #b3bcf5;
  }
  .btn:disabled, .btn[disabled] {
    opacity: 0.66;
    cursor: not-allowed;
    filter: grayscale(.11);
    background: #222c3d !important;
    color: #8a9ab7 !important;
  }
  .btn-icon {
    margin-right: 0.55em;
    display: inline-block;
    vertical-align: middle;
  }
  /* Animated Loading */
  .loading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    grid-column: 1 / -1;
  }
  .loading-spinner {
    border-top: 6px solid #6366f1;
    border-right: 6px solid #0ea5e9;
    border-left: 6px solid #fff1;
    border-bottom: 6px solid #fff1;
    width: 3.5rem;
    height: 3.5rem;
    border-radius: 50%;
    animation: spin 1.2s cubic-bezier(.47,.13,.34,.91) infinite;
    margin-bottom: 1.5rem;
    box-shadow: 0 0 16px #6366f1aa;
  }
  @keyframes spin {
    to { transform: rotate(360deg);}
  }
  .loading-text {
    color: var(--text-secondary);
    font-size: 1.18rem;
    font-family: var(--font-main);
    margin-top: .5rem;
  }
  /* Pagination */
  .pagination {
    display: flex;
    justify-content: center;
    margin-top: 2.3rem;
  }
  .load-more-btn {
    background: var(--primary-gradient);
    color: white;
    padding: 0.85rem 2.1rem;
    border-radius: 0.65rem;
    font-weight: 700;
    font-size: 1.05rem;
    border: none;
    cursor: pointer;
    transition: background .22s, box-shadow .22s, transform .14s;
    box-shadow: 0 2px 14px rgba(99, 102, 241, .15);
    margin: 0 auto;
  }
  .load-more-btn:hover, .load-more-btn:focus {
    background: var(--primary-hover);
    box-shadow: 0 3px 18px rgba(99, 102, 241, .17);
    transform: translateY(-2px) scale(1.03);
  }
  .load-more-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    background: #222c3d !important;
  }
  /* Modal styles */
  .modal-overlay {
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background-color: rgba(0, 0, 0, 0.75);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s;
  }
  .modal-overlay.active {
    opacity: 1;
    visibility: visible;
  }
  .modal-content {
    background: rgba(16, 18, 27, 0.96);
    border-radius: 1rem;
    width: 90%;
    max-width: 480px;
    max-height: 90vh;
    overflow-y: auto;
    transform: translateY(18px) scale(.96);
    transition: transform 0.3s;
    border: 1.5px solid var(--secondary-border);
    box-shadow: 0 12px 32px 0 rgba(99,102,241,0.18);
    animation: popIn .4s cubic-bezier(.7,.2,.2,1);
  }
  @keyframes popIn {
    from { transform: scale(.75) translateY(40px); opacity:0; }
    to   { transform: scale(1)   translateY(0);    opacity:1;}
  }
  .modal-header {
    padding: 1.5rem 1.5rem 0.6rem 1.5rem;
    border-bottom: 1.5px solid var(--secondary-border);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .modal-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin: 0;
    font-family: var(--font-main);
    color: #fff;
  }
  .modal-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 2rem;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 0.5rem;
    transition: background .18s;
  }
  .modal-close:hover {
    background: #232946;
    color: #fff;
  }
  .modal-body {
    padding: 1.5rem;
  }
  .progress-container {
    margin-bottom: 1.5rem;
  }
  .progress-bar {
    height: 9px;
    background: rgba(30,41,59,0.9);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.85rem;
  }
  .progress-fill {
    height: 100%;
    background: var(--primary-gradient);
    width: 0;
    transition: width 0.4s cubic-bezier(.5,.2,.7,1.1);
  }
  .progress-text {
    font-size: 0.98rem;
    color: var(--text-secondary);
    text-align: center;
    font-family: var(--font-main);
  }
  /* Toast notification */
  .toast {
    position: fixed;
    bottom: 1.5rem;
    right: 1.5rem;
    background: var(--success-color);
    color: white;
    padding: 0.75rem 1.6rem;
    border-radius: 0.7rem;
    box-shadow: 0 4px 18px -1px rgba(0, 0, 0, 0.11), 0 2px 8px -1px rgba(0, 0, 0, 0.08);
    display: flex;
    align-items: center;
    z-index: 1100;
    opacity: 0;
    transform: translateY(20px) scale(.94);
    transition: opacity 0.3s, transform 0.3s;
    font-family: var(--font-main);
  }
  .toast.show {
    opacity: 1;
    transform: translateY(0) scale(1.05);
    animation: toastPop 0.5s;
  }
  @keyframes toastPop {
    from { opacity: 0; transform: translateY(20px) scale(.95);}
    to   { opacity: 1; transform: translateY(0)    scale(1.05);}
  }
  .toast-icon {
    margin-right: 0.5rem;
  }
  /* Empty state */
  .empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    color: var(--text-secondary);
  }
  .empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--secondary-border);
  }
  @media (max-width: 640px) {
    .plugin-grid { grid-template-columns: 1fr; }
    .plugin-actions { flex-direction: column; }
    .btn { width: 100%; }
  }
</style>

<main id="content">
  <%- include('../components/instance') %>
  <div class="plugin-manager-container">
    <div class="plugin-header">
      <h1 class="plugin-title">Plugins Manager</h1>
      <input 
        type="text" 
        id="searchInput" 
        placeholder="Search plugins..." 
        class="search-input"
        autocomplete="off"
      />
    </div>
    <div class="plugin-grid" id="pluginContainer">
      <div class="loading-container" id="loading">
        <div class="loading-spinner"></div>
        <div class="loading-text">Loading plugins...</div>
      </div>
    </div>
    <div class="pagination">
      <button id="loadMore" type="button" class="load-more-btn" disabled>
        Load More Plugins
      </button>
    </div>
  </div>
  <!-- Installation Modal -->
  <div class="modal-overlay" id="installModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Installing Plugin</h3>
        <button type="button" class="modal-close" id="modalCloseBtn">&times;</button>
      </div>
      <div class="modal-body">
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill" id="installProgress"></div>
          </div>
          <div class="progress-text" id="installStatus">Preparing installation...</div>
        </div>
      </div>
    </div>
  </div>
  <!-- Toast Notification -->
  <div class="toast" id="toast">
    <svg class="toast-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20"
      viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
      <polyline points="22 4 12 14.01 9 11.01"></polyline>
    </svg>
    <span id="toastMessage">Plugin installed successfully</span>
  </div>
</main>

<script>
  // Configuration
  const API_URL = "https://api.spiget.org/v2/resources/free";
  const ITEMS_PER_PAGE = 12;
  let currentPage = 0;
  let allPlugins = [];
  let isLoading = false;
  let hasMore = true;

  // DOM Elements
  const pluginContainer = document.getElementById("pluginContainer");
  const searchInput = document.getElementById("searchInput");
  const loadMoreBtn = document.getElementById("loadMore");
  const installModal = document.getElementById("installModal");
  const modalCloseBtn = document.getElementById("modalCloseBtn");
  const installProgress = document.getElementById("installProgress");
  const installStatus = document.getElementById("installStatus");
  const toast = document.getElementById("toast");
  const toastMessage = document.getElementById("toastMessage");

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    fetchPlugins();
    searchInput.addEventListener('input', debounce(filterPlugins, 300));
    loadMoreBtn.addEventListener('click', fetchPlugins);
    modalCloseBtn.addEventListener('click', closeModal);
    installModal.addEventListener('click', (e) => {
      if (e.target === installModal) closeModal();
    });
  });

  // Fetch plugins from API
  async function fetchPlugins() {
    if (isLoading || !hasMore) return;
    isLoading = true;
    currentPage++;
    try {
      showLoading();
      const response = await fetch(
        `${API_URL}?size=${ITEMS_PER_PAGE}&page=${currentPage}&sort=-downloads`
      );
      if (!response.ok) throw new Error('Failed to fetch plugins');
      const plugins = await response.json();
      if (!Array.isArray(plugins)) throw new Error('Invalid response format');
      if (plugins.length < ITEMS_PER_PAGE) {
        hasMore = false;
        loadMoreBtn.disabled = true;
        loadMoreBtn.textContent = 'No more plugins';
      }
      allPlugins = [...allPlugins, ...plugins];
      renderPlugins(allPlugins);
    } catch (error) {
      console.error('Error fetching plugins:', error);
      showToast('Failed to load plugins. Please try again.', 'error');
      hasMore = false;
      loadMoreBtn.disabled = true;
      loadMoreBtn.textContent = 'Error loading plugins';
    } finally {
      isLoading = false;
      hideLoading();
    }
  }

  // Render plugins to the DOM with animation delays
  function renderPlugins(plugins) {
    if (!plugins.length && currentPage > 1) {
      pluginContainer.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">😕</div>
          <h3>No plugins found</h3>
          <p>Try adjusting your search or check your connection</p>
        </div>
      `;
      return;
    }
    pluginContainer.innerHTML = plugins.map((plugin, i) => `
      <div class="plugin-card" style="animation-delay:${i*0.06}s" data-id="${plugin.id}">
        <div class="plugin-card-content">
          <div class="plugin-card-header">
            ${plugin.icon && plugin.icon.data ? `
              <img src="data:image/jpeg;base64,${plugin.icon.data}" 
                   alt="${plugin.name} icon" 
                   class="plugin-icon"
                   onerror="this.onerror=null;this.src='https://via.placeholder.com/48/1e293b/94a3b8?text=🧩'">
            ` : `
              <div class="plugin-icon">🧩</div>
            `}
            <div>
              <h3 class="plugin-name">${escapeHtml(plugin.name)}</h3>
              <p class="plugin-author">by ${plugin.author ? escapeHtml(plugin.author.name) : 'Unknown'}</p>
            </div>
          </div>
          <div class="plugin-meta">
            <span class="plugin-rating">
              ★ ${plugin.rating ? plugin.rating.average.toFixed(1) : 'N/A'}
            </span>
            <span class="plugin-downloads">
              ↓ ${plugin.downloads ? formatNumber(plugin.downloads) : '0'}
            </span>
          </div>
          <p class="plugin-description">
            ${plugin.description ? truncate(escapeHtml(plugin.description), 120) : 'No description available.'}
          </p>
          <div class="plugin-actions">
            <button type="button" onclick="installPlugin(event, ${plugin.id}, '${escapeHtml(plugin.name)}')" 
                    class="btn btn-primary">
              <svg class="btn-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="7 10 12 15 17 10"></polyline>
                <line x1="12" y1="15" x2="12" y2="3"></line>
              </svg>
              Install
            </button>
            <a href="https://www.spigotmc.org/resources/${plugin.id}" 
               target="_blank" 
               rel="noopener noreferrer"
               class="btn btn-secondary" style="text-decoration:none;">
              <svg class="btn-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              Details
            </a>
          </div>
        </div>
      </div>
    `).join('');
  }

  // Filter plugins based on search input
  function filterPlugins() {
    const searchTerm = searchInput.value.trim().toLowerCase();
    if (!searchTerm) {
      renderPlugins(allPlugins);
      return;
    }
    const filtered = allPlugins.filter(plugin => 
      (plugin.name && plugin.name.toLowerCase().includes(searchTerm)) ||
      (plugin.author && plugin.author.name && plugin.author.name.toLowerCase().includes(searchTerm)) ||
      (plugin.description && plugin.description.toLowerCase().includes(searchTerm))
    );
    renderPlugins(filtered);
  }

  // Install plugin handler
  async function installPlugin(event, pluginId, pluginName) {
    event.preventDefault();
    event.stopPropagation();
    try {
      showModal(`Installing ${pluginName}`);
      updateProgress(10, 'Starting download...');
      await delay(500);
      updateProgress(30, 'Downloading plugin...');
      const downloadUrl = `https://api.spiget.org/v2/resources/${pluginId}/download`;
      const redirectUrl = `/instance/<%= req.params.id %>/plugins/download?downloadUrl=${encodeURIComponent(downloadUrl)}&plugin_name=${encodeURIComponent(pluginName)}`;
      updateProgress(70, 'Installing to server...');
      await delay(800);
      updateProgress(90, 'Finalizing installation...');
      await delay(300);
      updateProgress(100, 'Installation complete!');
      showToast(`Successfully installed ${pluginName}`, 'success');
      setTimeout(() => {
        window.location.href = redirectUrl;
      }, 1500);
    } catch (error) {
      console.error('Error installing plugin:', error);
      updateProgress(0, 'Installation failed');
      showToast(`Failed to install ${pluginName}`, 'error');
    } finally {
      setTimeout(closeModal, 2000);
    }
  }

  // Helper function to show loading state
  function showLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.style.display = 'flex';
    loadMoreBtn.disabled = true;
  }
  function hideLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.style.display = 'none';
    if (hasMore) {
      loadMoreBtn.disabled = false;
    }
  }
  // Show modal with progress
  function showModal(title) {
    document.querySelector('.modal-title').textContent = title;
    installModal.classList.add('active');
    installProgress.style.width = '0%';
    installStatus.textContent = 'Starting...';
  }
  // Update progress bar and status
  function updateProgress(percent, message) {
    installProgress.style.width = `${percent}%`;
    installStatus.textContent = message;
  }
  // Close modal
  function closeModal() {
    installModal.classList.remove('active');
  }
  // Show toast notification
  function showToast(message, type = 'success') {
    toastMessage.textContent = message;
    switch (type) {
      case 'error':
        toast.style.backgroundColor = 'var(--error-color)';
        break;
      case 'warning':
        toast.style.backgroundColor = 'var(--warning-color)';
        break;
      default:
        toast.style.backgroundColor = 'var(--success-color)';
    }
    toast.classList.add('show');
    setTimeout(() => {
      toast.classList.remove('show');
    }, 3000);
  }
  // Utility function to debounce rapid events
  function debounce(func, wait) {
    let timeout;
    return function() {
      const context = this;
      const args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), wait);
    };
  }
  // Utility function to delay execution
  function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  // Utility function to escape HTML
  function escapeHtml(unsafe) {
    if (!unsafe) return '';
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
  // Utility function to truncate text
  function truncate(text, length) {
    if (!text) return '';
    if (text.length <= length) return text;
    return text.substring(0, length) + '...';
  }
  // Utility function to format large numbers
  function formatNumber(num) {
    if (!num) return '0';
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  // Expose installPlugin to global for inline event handlers
  window.installPlugin = installPlugin;
</script>

<%- include('../components/footer') %>
