<%- include('../components/template') %>
<style>
  body {
    background: linear-gradient(135deg, #1a0033 0%, #340052 40%, #ff3cac 100%);
    min-height: 100vh;
    font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
  }
  .plugin-mgr-main {
    max-width: 1100px;
    margin: 48px auto 0 auto;
    background: rgba(30, 41, 59, 0.84);
    border-radius: 1.5rem;
    box-shadow: 0 16px 60px 0 #0008, 0 2px 8px #eab30822;
    padding: 2.5rem 2.5rem 2.5rem 2.5rem;
    border: 2px solid #ff3cac33;
    min-height: 500px;
  }
  .plugin-mgr-title {
    font-size: 2.15rem;
    font-weight: 800;
    color: #ff3cac;
    background: linear-gradient(90deg, #ff3cac, #ffe53b 80%, #784ba0);
    background-size: 200% 200%;
    background-clip: text; -webkit-background-clip: text;
    color: transparent; -webkit-text-fill-color: transparent;
    animation: rgbtext 2s linear infinite alternate;
    margin-bottom: 2.2rem;
    text-align: center;
  }
  @keyframes rgbtext { 0%{background-position:0% 50%}100%{background-position:100% 50%} }
  .plugin-mgr-controls {
    display: flex; gap: 1.2em; justify-content: center; margin-bottom: 2.2em;
  }
  .plugin-mgr-search {
    background: #232e44bb; color: #fff;
    border: 1.5px solid #ff3cac44;
    border-radius: 0.7em;
    padding: 0.85em 1.3em;
    font-size: 1.12em;
    width: 325px; max-width: 90%;
    transition: border .2s;
    box-shadow: 0 2px 24px #ff3cac11;
  }
  .plugin-mgr-search:focus { outline: none; border-color: #ff3cac; }
  .plugin-mgr-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(290px, 1fr));
    gap: 2em 1.6em;
  }
  .plugin-card {
    background: #20293bdd;
    border: 1.5px solid #ff3cac44;
    border-radius: 1.13em;
    box-shadow: 0 2px 16px #ff3cac33;
    padding: 1.4em 1.3em 1.4em 1.3em;
    display: flex; flex-direction: column;
    position: relative;
    transition: transform .18s, box-shadow .18s;
    min-height: 190px;
  }
  .plugin-card:hover {
    transform: translateY(-4px) scale(1.022);
    box-shadow: 0 8px 30px #ff3cac44;
    border-color: #ff3cac;
  }
  .plugin-card-title {
    font-size: 1.19rem; font-weight: 700; color: #ff3cac;
    margin-bottom: 0.25em; text-shadow: 0 1px 6px #ff3cac33;
  }
  .plugin-card-author {
    font-size: 0.98rem; color: #ffe53b; margin-bottom: 0.7em;
  }
  .plugin-card-desc {
    color: #fff; margin-bottom: 1.1em; font-size: 1.05em; opacity: 0.92;
  }
  .plugin-card-actions {
    margin-top: auto; display: flex; gap: 0.8em;
  }
  .plugin-card-actions .btn {
    flex: 1; padding: 0.7em 1em; border-radius: 0.7em; font-weight: 600;
    font-size: 1.02em; border: none; cursor: pointer;
    background: #ff3cac; color: #232e44;
    transition: background .2s, color .2s;
    box-shadow: 0 1px 8px #ff3cac33;
  }
  .plugin-card-actions .btn:hover {
    background: #ffe53b; color: #784ba0;
  }
  .plugin-mgr-section-title {
    font-size:1.2em;
    font-weight:700;
    margin:2em 0 1em 0;
    color:#ffe53b;
    letter-spacing:0.03em;
    text-align:left;
  }
  .plugin-mgr-installed-list {
    background:#181b23cc;
    border-radius:0.9em;
    padding:1.3em;
    margin-bottom:2em;
    border:1.5px solid #ff3cac33;
    color:#fff;
    font-size:1.02em;
    box-shadow:0 1px 8px #ff3cac11;
  }
</style>
<div class="plugin-mgr-main">
  <div class="plugin-mgr-title">Plugin Manager</div>
  <!-- Path display section -->
  <div class="text-sm text-purple-200 mt-2 mb-6 p-2 bg-purple-950/50 rounded-lg border border-purple-400/40">
    <strong>Plugin install location:</strong>
    <code>/srv/instances/<%= instance.Id %>/plugins/</code>
    <br>
    <span>
      After installing a plugin, its <code>.jar</code> file will be placed in this folder.<br>
      All plugins in this folder will be loaded automatically when you start or restart your Minecraft server!
    </span>
  </div>
  <!-- Installed plugins (old style) -->
  <div class="plugin-mgr-section-title">Installed Plugins</div>
  <div class="plugin-mgr-installed-list" id="pluginMgrInstalledList">
    Loading installed plugins...
  </div>
  <!-- Spigot API plugin search -->
  <div class="plugin-mgr-section-title">Discover New Plugins</div>
  <div class="plugin-mgr-controls">
    <input id="pluginMgrSearch" class="plugin-mgr-search" placeholder="Search Spigot plugins..." autocomplete="off"/>
    <button class="btn" onclick="loadPlugins()">Reload</button>
  </div>
  <div class="plugin-mgr-grid" id="pluginMgrGrid">
    <div style="grid-column: 1/-1; text-align:center; color:#fff; padding:2.2em 0;">
      Loading plugins...
    </div>
  </div>
</div>
<script>
let allPlugins = [];
async function loadPlugins(query = "") {
  document.getElementById("pluginMgrGrid").innerHTML = 
    '<div style="grid-column:1/-1;text-align:center;color:#fff;padding:2.2em 0;">Loading plugins...</div>';
  let url = "https://api.spiget.org/v2/resources/free?size=18&sort=-downloads";
  if (query) url += "&query=" + encodeURIComponent(query);
  try {
    const res = await fetch(url);
    const data = await res.json();
    allPlugins = Array.isArray(data) ? data : [];
    renderPlugins(allPlugins);
  } catch {
    document.getElementById("pluginMgrGrid").innerHTML =
      '<div style="grid-column:1/-1;text-align:center;color:#fff;padding:2.2em 0;">Failed to load plugins from SpigotMC.</div>';
  }
}
function renderPlugins(plugins) {
  if (!plugins.length) {
    document.getElementById("pluginMgrGrid").innerHTML =
      '<div style="grid-column:1/-1;text-align:center;color:#fff;padding:2.2em 0;">No plugins found.</div>';
    return;
  }
  document.getElementById("pluginMgrGrid").innerHTML = plugins.map(p =>
    `<div class="plugin-card">
      <div class="plugin-card-title">${escapeHtml(p.name)}</div>
      <div class="plugin-card-author">by ${p.author ? escapeHtml(p.author.name) : "Unknown"}</div>
      <div class="plugin-card-desc">${escapeHtml(p.tag || p.shortDescription || p.description || "No description.")}</div>
      <div class="plugin-card-actions">
        <a class="btn" href="https://www.spigotmc.org/resources/${p.id}" target="_blank">Details</a>
        <button class="btn" onclick="installPlugin(${p.id}, '${escapeHtml(p.name)}')">Install</button>
      </div>
    </div>`
  ).join('');
}
function escapeHtml(str) {
  return (str||"").replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}[m]));
}
async function loadInstalledPlugins() {
  const container = document.getElementById("pluginMgrInstalledList");
  try {
    let res = await fetch(`/instance/<%= instance.Id %>/plugins/installed`);
    let plugins = await res.json();
    if (!plugins.length) {
      container.innerHTML = "No plugins installed yet.";
      return;
    }
    container.innerHTML = plugins.map(p =>
      `<div>
        <b>${escapeHtml(p.name)}</b>
        <code style="background:#181b23;padding:2px 8px;border-radius:6px;margin-left:10px;">${escapeHtml(p.file)}</code>
        <button class="btn" style="background:#232e44;color:#fff;margin-left:16px;" onclick="removePlugin('${escapeHtml(p.file)}')">Remove</button>
      </div>`
    ).join('');
  } catch {
    container.innerHTML = "Failed to load installed plugins.";
  }
}
window.installPlugin = async function(id, name) {
  if (!confirm(`Install "${name}"?`)) return;
  try {
    let res = await fetch(`/instance/<%= instance.Id %>/plugins/install`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ pluginId: id })
    });
    let result = await res.json();
    if (result.ok) {
      alert(`Plugin "${name}" installed as ${result.file}.`);
      loadInstalledPlugins();
    } else {
      alert("Failed to install: " + (result.error || "Unknown error."));
    }
  } catch(e) {
    alert("Failed to install: " + e.message);
  }
}
window.removePlugin = async function(file) {
  if (!confirm(`Remove plugin "${file}"?`)) return;
  try {
    let res = await fetch(`/instance/<%= instance.Id %>/plugins/remove`, {
      method: "DELETE",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ file })
    });
    let result = await res.json();
    if (result.ok) {
      alert(`Removed plugin: ${file}`);
      loadInstalledPlugins();
    } else {
      alert("Failed to remove: " + (result.error || "Unknown error."));
    }
  } catch(e) {
    alert("Failed to remove: " + e.message);
  }
}
document.getElementById("pluginMgrSearch").addEventListener("input",function(){
  const v = this.value.toLowerCase();
  if (v.length > 1 || v.length === 0) loadPlugins(v);
});
loadPlugins();
loadInstalledPlugins();
</script>
<%- include('../components/footer') %>
